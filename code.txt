$section_details=MainSection::findOrFail(3);
        
        if($request->has('date'))
        {
            $section=3; // Lab section 3
            $date=explode('-',$request['date']);
            $from=date('Y-m-d',strtotime($date[0]));
            $to=date('Y-m-d 23:59:59',strtotime($date[1]));
    
            $start=date('Y-m-d',strtotime($date[0]));
            $end=date('Y-m-d',strtotime($date[1]));
                
            if ($from==$to) {
                $expense_query=ExpensesInvoice::with('payment_method:id,name')
                    ->whereDate('created_at',$from)
                    ->where('section_id',$section);
        
                $expenses_invoice_payment=$expense_query->clone()
                    ->where('type_id',2)
                    ->get()
                    ->groupBy('payment_method.name')
                    ->map(function ($row) {
                        return $row->sum('amount');
                    });
                
                $expenses_invoice_sum=$expense_query->clone()
                    ->where('type_id',2)
                    ->sum('amount');
                
                $expenses_invoice_id=$expense_query->clone()
                    ->where('type_id',2)->pluck('id')->toArray();
    
                $incomes_invoice_payment=$expense_query->clone()
                    ->where('type_id',1)
                    ->get()
                    ->groupBy('payment_method.name')
                    ->map(function ($row) {
                        return $row->sum('amount');
                    });
    
                $incomes_invoice_sum=$expense_query->clone()
                    ->where('type_id',1)
                    ->sum('amount');
    
                $incomes_invoice_id=$expense_query->clone()
                    ->where('type_id',1)->pluck('id')->toArray();
                
        
            }else {
                $expense_query=ExpensesInvoice::with('payment_method:id,name')
                    ->whereBetween('created_at',[$from,$to])
                    ->where('section_id',$section);
    
                $expenses_invoice_payment=$expense_query->clone()
                    ->where('type_id',2)
                    ->get()
                    ->groupBy('payment_method.name')
                    ->map(function ($row) {
                        return $row->sum('amount');
                    });
    
                $expenses_invoice_sum=$expense_query->clone()
                    ->where('type_id',2)
                    ->sum('amount');
    
                $expenses_invoice_id=$expense_query->clone()
                    ->where('type_id',2)
                    ->pluck('id')->toArray();
    
                $incomes_invoice_payment=$expense_query->clone()
                    ->where('type_id',1)
                    ->get()
                    ->groupBy('payment_method.name')
                    ->map(function ($row) {
                        return $row->sum('amount');
                    });
    
                $incomes_invoice_sum=$expense_query->clone()
                    ->where('type_id',1)
                    ->sum('amount');
                
                $incomes_invoice_id=$expense_query->clone()
                    ->where('type_id',1)
                    ->pluck('id')->toArray();
            }

            $expense_invoice=Expense::with('category:id,name')
                ->whereIn('expense_invoice_id',$expenses_invoice_id)
                ->join('expense_categories', 'expense_categories.id', '=', 'expenses.expense_category_id')
                ->select('expenses.*', 'expense_categories.order')
                ->orderBy('expense_categories.order','asc')
                ->get()
                ->groupBy('category.name');
           
            $expense_level_data=array();
            
            foreach ($expense_invoice as $category=>$level){
                foreach ($level as $ll){
                    if (!isset($expense_level_data[$category][$ll['level']])) {
                        $expense_level_data[$category][$ll['level']]=0;
                    }
                        $expense_level_data[$category][$ll['level']]+=$ll['amount'];
                }
            }
            
            $income_invoice=Expense::with('category:id,name')
                ->whereIn('expense_invoice_id',$incomes_invoice_id)
                ->join('expense_categories', 'expense_categories.id', '=', 'expenses.expense_category_id')
                ->select('expenses.*', 'expense_categories.order')
            ->orderBy('expense_categories.order','asc')
            ->get()
            ->groupBy('category.name');
       
            $income_level_data=array();
            
            foreach ($income_invoice as $category1=>$level1){
               
                foreach ($level1 as $ll1){
                    if (!isset($income_level_data[$category1][$ll1['level']])) {
                        $income_level_data[$category1][$ll1['level']]=0;
                    }
                    $income_level_data[$category1][$ll1['level']]+=$ll1['amount'];
                }
            }
            
            $groups_payment=array();
            $groups_payment_sum=array();
    
            if ($from==$to) {
                $query=Group::with('tests','tests.test:name,id','cultures','cultures.culture:name,id','packages','packages.package:id,name','payments')
                    ->whereDate('created_at',$from);
                $groups=$query->clone()->get();
                $groups_id=$query->clone()->pluck('id');
            }else {
                $query=Group::with('tests','tests.test:name,id','cultures','cultures.culture:name,id','packages','packages.package:id,name','payments')
                    ->whereBetween('created_at',[$from,$to]);
                $groups=$query->clone()->get();
                $groups_id=$query->clone()->pluck('id');
            }
            
            $test_wise=array();
            
            foreach ($groups as $group ){
                $group_percentage=0;
                if($group['discount']>0 && $group['subtotal'] >0){
                    $group_percentage=$group['discount']/$group['subtotal'];
                }
                $group_due=0;
                if($group['due']>0 && $group['total']>0){
                    $group_due=$group['due']/$group['total'];
                }
                
                foreach ($group['tests'] as $tests ){
                    if ($group_percentage>0) {
                        $disc=$tests['price']*$group_percentage;
                    }else {
                        $disc=0;}
                    
                    $net=$tests['price']-$disc;
                    
                    if ($group_due>0) {
                        $due=$net*$group_due;
                    }
                    else {
                        $due=0; }
                    
                    if (@$test_wise[$tests['test']['name']]['price']) {
                        $test_wise[$tests['test']['name']]['count']+=1;
                        $test_wise[$tests['test']['name']]['price']+=$tests['price'];
                        $test_wise[$tests['test']['name']]['discount']+=$disc;
                        $test_wise[$tests['test']['name']]['net']+=$net;
                        $test_wise[$tests['test']['name']]['receive']+=$net-$due;
                        $test_wise[$tests['test']['name']]['due']+=$due;
                    }else {
                        $test_wise[$tests['test']['name']]['count']=1;
                        $test_wise[$tests['test']['name']]['price']=$tests['price'];
                        $test_wise[$tests['test']['name']]['discount']=$disc;
                        $test_wise[$tests['test']['name']]['net']=$net;
                        $test_wise[$tests['test']['name']]['receive']=$net-$due;
                        $test_wise[$tests['test']['name']]['due']=$due;
                    }
                    
                }
    
                foreach ($group['cultures'] as $tests ){
                    
                    if ($group_percentage>0) { $disc=$tests['price']*$group_percentage;}else {  $disc=0;}
                    $net=$tests['price']-$disc;
                    if ($group_due>0) { $due=$net*$group_due; }else { $due=0; }
                    
                    if (@$test_wise[$tests['culture']['name']]['price']) {
                        $test_wise[$tests['culture']['name']]['count']+=1;
                        $test_wise[$tests['culture']['name']]['price']+=$tests['price'];
                        $test_wise[$tests['culture']['name']]['discount']+=$disc;
                        $test_wise[$tests['culture']['name']]['net']+=$net;
                        $test_wise[$tests['culture']['name']]['receive']+=$net-$due;
                        $test_wise[$tests['culture']['name']]['due']+=$due;
                    }else {
                        $test_wise[$tests['culture']['name']]['count']=1;
                        $test_wise[$tests['culture']['name']]['price']=$tests['price'];
                        $test_wise[$tests['culture']['name']]['discount']=$disc;
                        $test_wise[$tests['culture']['name']]['net']=$net;
                        $test_wise[$tests['culture']['name']]['receive']=$net-$due;
                        $test_wise[$tests['culture']['name']]['due']=$due;
                    }
                }
    
                foreach ($group['packages'] as $tests ){
        
                    if ($group_percentage>0) { $disc=$tests['price']*$group_percentage;}else {  $disc=0;}
                    $net=$tests['price']-$disc;
                    if ($group_due>0) { $due=$net*$group_due; }else { $due=0; }
        
        
                    if (@$test_wise[$tests['package']['name']]['price']) {
                        $test_wise[$tests['package']['name']]['count']+=1;
                        $test_wise[$tests['package']['name']]['price']+=$tests['price'];
                        $test_wise[$tests['package']['name']]['discount']+=$disc;
                        $test_wise[$tests['package']['name']]['net']+=$net;
                        $test_wise[$tests['package']['name']]['receive']+=$net-$due;
                        $test_wise[$tests['package']['name']]['due']+=$due;
                    }else {
                        $test_wise[$tests['package']['name']]['count']=1;
                        $test_wise[$tests['package']['name']]['price']=$tests['price'];
                        $test_wise[$tests['package']['name']]['discount']=$disc;
                        $test_wise[$tests['package']['name']]['net']=$net;
                        $test_wise[$tests['package']['name']]['receive']=$net-$due;
                        $test_wise[$tests['package']['name']]['due']=$due;
                    }
                }
                
            }
           
            $i=0;
            $test_details=array();
            $total_test_income=array();
            $total_test_income['total_test']=0;
            $total_test_income['total_price']=0;
            $total_test_income['total_discount']=0;
            $total_test_income['total_net']=0;
            $total_test_income['total_receive']=0;
            $total_test_income['total_due']=0;
    
            foreach ($test_wise as $key=>$val){
                $test_details[$i]=$val;
                $test_details[$i]['name']=$key;
    
                $total_test_income['total_test']+=$val['count'];
                $total_test_income['total_price']+=$val['price'];
                $total_test_income['total_discount']+=$val['discount'];
                $total_test_income['total_net']+=$val['net'];
                $total_test_income['total_receive']+=$val['receive'];
                $total_test_income['total_due']+=$val['due'];
                $i++;
            }
    
            $groups_payment_query=GroupPayment::with('payment_method:id,name','creator:id,name');
            
            
            $groups_payment_creator=$groups_payment_query->clone()
                ->whereIn('group_id',$groups_id)
                ->get()
                ->groupBy('creator.name')
                ->map(function ($row) {
                    return $row->sum('amount');
                });
    
            // Already Receive
            $groups_payment_creator_later=$groups_payment_query->clone()
                ->whereIn('group_id',$groups_id)
                ->whereDate('created_at','>',$to)
                ->sum('amount');
    
            if ($start==$end) {
    
                $groups_payment=$groups_payment_query->clone()
                    ->whereDate('created_at',$start)
                    ->whereIn('group_id',$groups_id)
                    ->get()
                    ->groupBy('payment_method.name')
                    ->map(function ($row) {
                        return $row->sum('amount');
                    });
                
                $groups_payment_sum=$groups_payment_query->clone()
                    ->whereDate('created_at',$start)
 //                   ->whereDate('date',$start)
                    ->whereNotIn('group_id',$groups_id)
                    ->get()
                    ->groupBy('payment_method.name')
                    ->map(function ($row) {
                        return $row->sum('amount');
                    });
                $groups_payment_creator_due=$groups_payment_query->clone()
                    ->whereDate('created_at',$start)
                    //                   ->whereDate('date',$start)
                    ->whereNotIn('group_id',$groups_id)
                    ->get()
                    ->groupBy('creator.name')
                    ->map(function ($row) {
                        return $row->sum('amount');
                    });
                
            }else {
                $groups_payment=$groups_payment_query->clone()
                    ->whereBetween('created_at',[$from,$to])
                    ->whereIn('group_id',$groups_id)
                    ->get()
                    ->groupBy('payment_method.name')
                    ->map(function ($row) {
                        return $row->sum('amount');
                    });
                
                $groups_payment_sum=$groups_payment_query->clone()
                    ->whereBetween('created_at',[$from,$to])
                    // ->whereBetween('date',[$start,$end])
                    ->whereNotIn('group_id',$groups_id)
                    ->get()
                    ->groupBy('payment_method.name')
                    ->map(function ($row) {
                        return $row->sum('amount');
                    });
    
                $groups_payment_creator_due=$groups_payment_query->clone()
                    ->whereBetween('created_at',[$from,$to])
 // ->whereBetween('date',[$start,$end])
                    ->whereNotIn('group_id',$groups_id)
                    ->get()
                    ->groupBy('creator.name')
                    ->map(function ($row) {
                        return $row->sum('amount');
                    });
            }
            
            $payment_methods=array();
            
            foreach ($groups_payment as $gk=>$gp){
                $payment_methods[$gk]['group']=$gp;
    
                if (!isset($payment_methods[$gk]['total_income'])) {
                    $payment_methods[$gk]['total_income']=0;
                }
                $payment_methods[$gk]['total_income']+=$gp;
                
                if (!isset($payment_methods[$gk]['balance'])) {
                    $payment_methods[$gk]['balance']=0;
                }
                $payment_methods[$gk]['balance']+=$gp;
            }
            
            foreach ($groups_payment_sum as $gsk=>$gsp){
                $payment_methods[$gsk]['group_due']=$gsp;
                if (!isset($payment_methods[$gsk]['total_income'])) {
                    $payment_methods[$gsk]['total_income']=0;
                }
                $payment_methods[$gsk]['total_income']+=$gsp;
    
                if (!isset($payment_methods[$gsk]['balance'])) {
                    $payment_methods[$gsk]['balance']=0;
                }
                $payment_methods[$gsk]['balance']+=$gsp;
            }
            foreach ($expenses_invoice_payment as $ek=>$ep){
                $payment_methods[$ek]['expenses']=$ep;
                if (!isset($payment_methods[$ek]['balance'])) {
                    $payment_methods[$ek]['balance']=0;
                }
                $payment_methods[$ek]['balance']-=$ep;
            }
            
            foreach ($incomes_invoice_payment as $ik=>$ip){
                $payment_methods[$ik]['incomes']=$ip;
                
                if (!isset($payment_methods[$ik]['total_income'])) {
                    $payment_methods[$ik]['total_income']=0;
                }
                $payment_methods[$ik]['total_income']+=$ip;
                
                if (!isset($payment_methods[$ik]['balance'])) {
                    $payment_methods[$ik]['balance']=0;
                }
                $payment_methods[$ik]['balance']+=$ip;
            }